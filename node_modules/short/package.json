{
  "name": "short",
  "version": "2.6.0",
  "author": {
    "name": "Edward Hotchkiss",
    "email": "edward@edwardhotchkiss.com"
  },
  "description": "Node.js URL Shortener backed by Mongoose.js",
  "contributors": [
    {
      "name": "Edward Hotchkiss",
      "email": "edward@edwardhotchkiss.com"
    },
    {
      "name": "Kevin Roth"
    },
    {
      "name": "Chase Brammer"
    },
    {
      "name": "Chris Lynch"
    },
    {
      "name": "CashLee"
    },
    {
      "name": "Patrick Williams"
    },
    {
      "name": "Niklas NihlÃ©n"
    },
    {
      "name": "Matt Roman"
    },
    {
      "name": "Jan Paul Erkelens"
    },
    {
      "name": "Tarang Shah"
    }
  ],
  "homepage": "http://edwardhotchkiss.github.com/short",
  "repository": {
    "type": "git",
    "url": "git://github.com/edwardhotchkiss/short.git"
  },
  "keywords": [
    "short",
    "url",
    "shortener",
    "tiny",
    "uri",
    "vanity",
    "bit.ly"
  ],
  "main": "./lib/short",
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "node-promise": "0.5.8",
    "mongoose": "4.0.6",
    "short-id": "0.1.0-1"
  },
  "devDependencies": {
    "vows": "0.7.0"
  },
  "bugs": {
    "url": "https://github.com/edwardhotchkiss/short/issues"
  },
  "license": {
    "type": "MIT",
    "url": "http://github.com/edwardhotchkiss/short/LICENSE"
  },
  "scripts": {
    "test": "vows test/*.test.js --spec"
  },
  "readme": "\n# short [![Build Status](https://secure.travis-ci.org/edwardhotchkiss/short.png)](http://travis-ci.org/edwardhotchkiss/short) [![Dependency Status](https://david-dm.org/edwardhotchkiss/short.png?theme=shields.io)](https://david-dm.org/edwardhotchkiss/short)\n\n[![NPM](https://nodei.co/npm/short.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/short/)\n\n> Node.js URL Shortener backed by Mongoose.js\n\n_**No Callbacks, just Promises!**_\n\n## Installation\n\n```bash\n$ npm install short\n```\n\n***\n\n## Basic API Usage\n\n**Generates a Shortened URL Doc, then retrieves it for demo:**\n\n```javascript\nvar shortURLPromise\n  , short = require('../lib/short');\n\n// connect to mongodb\nshort.connect('mongodb://localhost/short');\n\nshort.connection.on('error', function(error) {\n  throw new Error(error);\n});\n\n// promise to generate a shortened URL.\nvar shortURLPromise = short.generate({\n  URL : 'http://nodejs.org/'\n});\n\n// gets back the short url document, and then retrieves it\nshortURLPromise.then(function(mongodbDoc) {\n  console.log('>> created short URL:');\n  console.log(mongodbDoc);\n  console.log('>> retrieving short URL: %s', mongodbDoc.hash);\n  short.retrieve(mongodbDoc.hash).then(function(result) {\n    console.log('>> retrieve result:');\n    console.log(result);\n    process.exit(0);\n  }, function(error) {\n    if (error) {\n      throw new Error(error);\n    }\n  });\n}, function(error) {\n  if (error) {\n    throw new Error(error);\n  }\n});\n```\n\n**Listing all Shortened URLs in DB:**\n\n```javascript\nvar listURLsPromise\n  , short = require('../lib/short');\n\n// connect to mongodb\nshort.connect('mongodb://localhost/short');\n\nshort.connection.on('error', function(error) {\n  throw new Error(error);\n});\n\n// promise to retrieve all shortened URLs\nlistURLsPromise = short.list();\n\n// output all resulting shortened url db docs\nlistURLsPromise.then(function(URLsDocument) {\n  console.log('>> listing (%d) Shortened URLS:', URLsDocument.length);\n  console.log(URLsDocument);\n  process.exit(0);\n}, function(error) {\n  if (error) {\n    throw new Error(error);\n  }\n});\n```\n\n**Updating the URL or the data fields of an existing Short URL hash**\n\n```javascript\n// Basically, update works like this\nvar updatePromise = short.update(hash, updateData);\n// hash => Short url hashcode generated using short.generate()\n// updateData => An object consisting of the new URL and/or the new data object. \n//               If a key already exists in the current data object, it's value is updated, \n//               otherwise, it is added and saved to the data object\n\n//This function returns a promise which on resolution returns the new updated object as an argument.\n```\nHere's some working code. `hash` is assumed to be given \n```javascript\n// The basic Initialisation, Connection, Short URL generation and \n// retrieval remains the same as depicted in previous examples\n\n// the variable hash contains the short url hash code generated using short.generate()\nvar updatePromise = short.update(hash,{\n  URL : 'http://www.youtube.com/watch?v=qvsgGtivCgs',\n  data: {\n    'type' : 'movie-trailer',\n    'movie': 'Back To The Future'\n  }\n});\nupdatePromise.then(function(ShortURLObject) {\n  console.log('New URL:', ShortURLObject.URL, '\\nNew data:', ShortURLObject.data);\n}, function(error) {\n  console.log('Error', error);\n});\n```\n\n## Contribute\n\n  1. Fork\n  2. Clone forked repository\n  3. Add some sweet code\n  4. Tests still passing? Run tests with `npm test`\n  5. Add a test if adding a feature\n  6. Pull Request\n  7. **Instant Karma!**\n\n## License (MIT)\n\nCopyright (c) 2011-2013, Edward Hotchkiss.\n\n### Author: [Edward Hotchkiss][0]\n\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/edwardhotchkiss/short/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\n\n[0]: http://edwardhotchkiss.com/\n",
  "readmeFilename": "README.md",
  "_id": "short@2.6.0",
  "_shasum": "64d257a156b4dc1f73d7323924960019e137f331",
  "_resolved": "https://github.com/selcukfatihsevinc/short/tarball/579a4e9dad4b2ca57894bb00b4f21d8190b42381",
  "_from": "https://github.com/selcukfatihsevinc/short/tarball/579a4e9dad4b2ca57894bb00b4f21d8190b42381"
}
